// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vastness-io/parser/pkg/vcs (interfaces: Vcs)

package mock_vcs

import (
	gomock "github.com/golang/mock/gomock"
	go_billy_v4 "gopkg.in/src-d/go-billy.v4"
	reflect "reflect"
)

// MockVcs is a mock of Vcs interface
type MockVcs struct {
	ctrl     *gomock.Controller
	recorder *MockVcsMockRecorder
}

// MockVcsMockRecorder is the mock recorder for MockVcs
type MockVcsMockRecorder struct {
	mock *MockVcs
}

// NewMockVcs creates a new mock instance
func NewMockVcs(ctrl *gomock.Controller) *MockVcs {
	mock := &MockVcs{ctrl: ctrl}
	mock.recorder = &MockVcsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockVcs) EXPECT() *MockVcsMockRecorder {
	return _m.recorder
}

// Checkout mocks base method
func (_m *MockVcs) Checkout(_param0 string) error {
	ret := _m.ctrl.Call(_m, "Checkout", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Checkout indicates an expected call of Checkout
func (_mr *MockVcsMockRecorder) Checkout(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Checkout", reflect.TypeOf((*MockVcs)(nil).Checkout), arg0)
}

// Cleanup mocks base method
func (_m *MockVcs) Cleanup() error {
	ret := _m.ctrl.Call(_m, "Cleanup")
	ret0, _ := ret[0].(error)
	return ret0
}

// Cleanup indicates an expected call of Cleanup
func (_mr *MockVcsMockRecorder) Cleanup() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Cleanup", reflect.TypeOf((*MockVcs)(nil).Cleanup))
}

// Clone mocks base method
func (_m *MockVcs) Clone(_param0 string) error {
	ret := _m.ctrl.Call(_m, "Clone", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clone indicates an expected call of Clone
func (_mr *MockVcsMockRecorder) Clone(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Clone", reflect.TypeOf((*MockVcs)(nil).Clone), arg0)
}

// Open mocks base method
func (_m *MockVcs) Open(_param0 string) (go_billy_v4.File, error) {
	ret := _m.ctrl.Call(_m, "Open", _param0)
	ret0, _ := ret[0].(go_billy_v4.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open
func (_mr *MockVcsMockRecorder) Open(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Open", reflect.TypeOf((*MockVcs)(nil).Open), arg0)
}
